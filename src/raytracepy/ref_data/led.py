"""
Data for Lumileds LUXEON C Color Line. Data obtained from manufactures datasheet.
https://lumileds.com/products/color-leds/luxeon-c-colors/
"""

import numpy as np

x = np.array([
    -180,  # angle of emitted light in degrees
    -124,
    -122.741024035727,
    -119.684258904814,
    -116.627106146493,
    -113.569307342493,
    -110.50944119232,
    -107.86373877591,
    -105.909983584157,
    -104.512845198421,
    -103.53250318259,
    -102.691448615184,
    -100.155730091936,
    -99.0340871186469,
    -98.3034675996358,
    -97.6278287214063,
    -96.7859450620458,
    -96.2248866919852,
    -94.5312887115133,
    -93.6903525858156,
    -92.8488242515787,
    -92.0071774756339,
    -91.1654122579813,
    -90.3235417588106,
    -89.4817633809683,
    -88.6405903718549,
    -87.7992989210337,
    -86.9582443536281,
    -85.9772212979771,
    -84.8564370270692,
    -83.7355639248805,
    -82.6153126416579,
    -81.4952390209971,
    -80.3753430628981,
    -79.2561577550462,
    -78.1367947846325,
    -76.8779311707192,
    -75.4798689396614,
    -73.9423297534456,
    -72.4055249058185,
    -70.8692412017059,
    -69.1937648025341,
    -67.5190582744634,
    -65.7050473777232,
    -63.7518251736555,
    -61.7988567732475,
    -59.7067468615184,
    -57.4757492421278,
    -55.2451069478608,
    -53.0147311474364,
    -50.6452406260772,
    -47.9977447150791,
    -45.072281907997,
    -42.0079903449217,
    -38.9446678503652,
    -35.8821852151916,
    -32.8205101371169,
    -29.7596426161411,
    -26.6995826522643,
    -23.6403302454864,
    -20.5814977684,
    -17.5233436392766,
    -14.4651249055854,
    -11.8242732154831,
    -9.04515698261403,
    11.1343341862208,
    13.877060550283,
    16.9323720784181,
    19.9874574905654,
    23.0420260661694,
    26.0958839915264,
    29.1491604757721,
    32.2016617052028,
    35.2533553775346,
    38.3042737950514,
    41.3544492600372,
    44.4035587496524,
    47.3135293813483,
    50.0842480971312,
    52.7156793644887,
    55.0697971391839,
    57.2850716218581,
    59.4999907794087,
    61.5758636020106,
    63.5133499791789,
    65.4503795097598,
    67.3870537152172,
    69.1850580611543,
    70.8442487254975,
    72.3647323057836,
    73.7462363860847,
    75.1275983363364,
    76.508249636341,
    77.8887588062962,
    79.1305490480236,
    80.2340112191592,
    81.3374733902947,
    82.440402573745,
    83.5429764320717,
    84.6453726278367,
    85.7474134984781,
    86.8493655378387,
    87.8132737667062,
    88.6391677955076,
    89.4651802660168,
    90.2910742948182,
    91.1160207899568,
    91.9416779353426,
    92.7668613138969,
    93.5926369009905,
    94.4187678132076,
    96.6102947334588,
    97.4354781120132,
    98.2592994109273,
    99.0372508684311,
    100.184391709381,
    102.78782927909,
    103.889337162046,
    105.13160709269,
    106.651901166244,
    109.00586550509,
    112.057559177422,
    115.11199854389,
    118.167826908568,
    121.223784482383,
    123.446698455213,
    124,
    180
])

# normalized intensity [0, 1]
y = np.array([
    0,
    0,
    0.00826858020970777,
    0.00881849429180281,
    0.0101932794970407,
    0.0129428499075165,
    0.0200917329747538,
    0.0328428657533352,
    0.051368096393916,
    0.0680029973772948,
    0.0846378983606734,
    0.100516667481171,
    0.174869633997788,
    0.196545414067039,
    0.213936446913298,
    0.232587699531026,
    0.250230776331579,
    0.261572754274792,
    0.317778556082268,
    0.333405281248472,
    0.350292226186144,
    0.36743121507811,
    0.38482224792437,
    0.402437319841113,
    0.419856357571183,
    0.435987170645974,
    0.452370027675059,
    0.468248796795557,
    0.486332950516124,
    0.506181411916746,
    0.526218906283089,
    0.54493316988939,
    0.56326936756425,
    0.58122749930767,
    0.597673367325329,
    0.614497301274428,
    0.632531046204136,
    0.651131890031005,
    0.670892136047624,
    0.689089709547623,
    0.706178289648731,
    0.723821366449284,
    0.739826157546928,
    0.756623086786639,
    0.774014119632898,
    0.790865058291386,
    0.808161574654785,
    0.825363574535324,
    0.841809442552983,
    0.857688211673481,
    0.873955548556848,
    0.890523237819082,
    0.907309365175036,
    0.923875526898153,
    0.938379510813413,
    0.951096273961864,
    0.962094555603767,
    0.971374355739123,
    0.978935674367931,
    0.984778511490192,
    0.989727738229049,
    0.993233440502406,
    0.996876621296286,
    0.999305408492206,
    1.00031358430938,
    0.99946293596364,
    0.996945360556548,
    0.994402007926858,
    0.991377480475334,
    0.987253124859621,
    0.981616505518145,
    0.974742579491956,
    0.966218911219481,
    0.955976761440458,
    0.94408486941515,
    0.930611974403819,
    0.914870683803845,
    0.898689461938195,
    0.881827721395952,
    0.864209848990828,
    0.84776398097317,
    0.831507145921231,
    0.814494179006412,
    0.797238169707096,
    0.781143362911489,
    0.764076386577893,
    0.746253278381416,
    0.728988267512303,
    0.711975300597484,
    0.695441217195823,
    0.678806316212444,
    0.661868962483913,
    0.64341934502962,
    0.624667274830175,
    0.606368883748459,
    0.58935591683364,
    0.57234294991882,
    0.55419578520968,
    0.535292488637659,
    0.516011126134197,
    0.495973631767855,
    0.475747104435792,
    0.457410906760931,
    0.441028049731846,
    0.424897236657055,
    0.40851437962797,
    0.390115170964536,
    0.373228226026864,
    0.355333105272017,
    0.338698204288638,
    0.32281943516814,
    0.256027787280332,
    0.238132666525485,
    0.217339040296262,
    0.197483577674687,
    0.174869633997788,
    0.0976811729953681,
    0.0765094808347042,
    0.0592318677678769,
    0.0422945140393458,
    0.0255221345354434,
    0.0152799847564211,
    0.0108806720996597,
    0.00943714763415992,
    0.00826858020970777,
    0.00826858020970777,
    0,
    0

])


def local_run():
    import plotly.graph_objs as go
    import raytracepy.ref_data.utils_ref_data as utils

    global x
    x = x / 180 * np.pi

    # plot pdf
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x, y=y, mode="lines"))
    fig.write_html("temp.html", auto_open=True)

    # create cdf
    def func(x_):
        return np.interp(x_, x, y)
    x_cdf, y_cdf = utils.generate_cdf(func, npts=101, x_range=(0, np.pi/2))

    # plot and print cdf
    utils.print_cdf(x_cdf, y_cdf)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x_cdf, y=func(x_cdf), mode="lines", yaxis="y1"))
    fig.add_trace(go.Scatter(x=x_cdf, y=y_cdf, mode="lines", yaxis="y2"))
    fig.update_layout(yaxis2=dict(overlaying='y', side='right'))
    fig.write_html("temp2.html", auto_open=True)


if __name__ == "__main__":
    local_run()
